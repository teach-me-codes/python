questions = [
    {'Main question': 'What is operator overloading in Python and how is it related to magic methods?', 'Explanation': 'Explain the concept of operator overloading in Python, which allows operators like +, -, *, / to have different implementations for objects of different classes. Discuss how magic methods, such as __add__, __sub__, __mul__, __truediv__, are used to enable operator overloading in Python.', 'Follow-up questions': ['Can you provide an example of how operator overloading can be implemented for a custom class in Python?', 'How does operator overloading improve code readability and maintainability in object-oriented programming?', 'What are some common use cases where operator overloading is beneficial in Python programming?']},
    {'Main question': 'What is the purpose of the __init__ method in Python classes?', 'Explanation': 'Describe the significance of the __init__ method in Python classes, which is used as a constructor to initialize object attributes when a class is instantiated. Mention how it is called automatically when creating a new object and can accept parameters to initialize instance variables.', 'Follow-up questions': ['How does the __init__ method differ from regular methods in a Python class?', 'Can you explain the role of self parameter in the __init__ method and its importance in instance variable initialization?', 'Are there any best practices or conventions to follow when defining the __init__ method in Python classes?']},
    {'Main question': 'How can the __str__ method be used to customize string representation of objects in Python?', 'Explanation': 'Explain the purpose of the __str__ method in Python classes, which allows customizing the string representation of objects when using functions like print(). Discuss how it is used to provide a more user-friendly and informative output for objects.', 'Follow-up questions': ['Can you demonstrate the implementation of the __str__ method for a custom class in Python?', 'What are the differences between the __str__ and __repr__ methods in Python and when should each be used?', 'How does the use of the __str__ method contribute to better debugging and logging practices in Python programming?']},
    {'Main question': 'What is method overloading and method overriding in Python?', 'Explanation': 'Define method overloading as the ability to define multiple methods with the same name in a class but with different signatures or parameters, where the appropriate method is called based on the arguments passed. Contrast this with method overriding, which involves subclass redefining a method of its superclass to provide a new implementation.', 'Follow-up questions': ['How does Python handle method overloading compared to languages like Java and C++?', 'Can you provide examples to illustrate method overriding in Python inheritance and polymorphism?', 'What are the advantages and disadvantages of using method overloading and overriding in object-oriented programming?']},
    {'Main question': 'How do magic methods like __eq__, __lt__, and __gt contribute to object comparison in Python?', 'Explanation': 'Discuss the role of magic methods in object comparison, such as __eq__ for equality, __lt__ for less than, and __gt__ for greater than comparisons. Explain how these magic methods can be implemented in classes to customize the comparison behavior between objects.', 'Follow-up questions': ['What happens if the __eq__ method is not implemented in a class for object comparison?', 'How can the implementation of comparison magic methods impact sorting and ordering of objects in Python?', 'Are there any considerations to keep in mind when using magic methods for object comparison in Python programming?']}
]