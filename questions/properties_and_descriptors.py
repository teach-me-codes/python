questions = [
    {'Main question': 'What is a property in Python and how is it different from an instance variable?', 'Explanation': 'The interviewee should explain the concept of properties in Python, which are special methods that provide getters, setters, and deleters for class attributes. Properties allow for controlled access to attribute values and enable validation and computation of values on the fly. The key difference between a property and an instance variable is that properties are accessors methods that can execute custom code upon attribute access or assignment.', 'Follow-up questions': ['Can you provide an example of defining a property in a Python class?', 'How can properties be used to enforce data validation and constraints in a class?', 'What advantages do properties offer over directly accessing instance variables?']},
    {'Main question': 'What are descriptors in Python and how do they differ from properties?', 'Explanation': 'The candidate should describe descriptors as objects implementing specific methods like __get__, __set__, and __delete__ that allow for customization of attribute access on a per-instance basis. Descriptors are more versatile than properties as they can be shared across multiple classes, whereas properties are bound to a specific class attribute.', 'Follow-up questions': ['How can descriptors be used to override attribute access behavior in Python classes?', 'What is the purpose of the __set_name__ method in descriptor classes?', 'Can you explain an example scenario where using descriptors would be more appropriate than properties?']},
    {'Main question': 'How do you define a property in a Python class and what are the necessary methods to implement?', 'Explanation': 'The interviewee should explain the process of defining a property in a Python class using the property() function or the @property decorator. The necessary methods to implement for a property are the getter method (fget), setter method (fset), and deleter method (fdel), which control attribute access, assignment, and deletion respectively.', 'Follow-up questions': ['What is the syntax for defining a property using the property() function?', 'Can you demonstrate how to create a read-only property in a Python class?', 'How can properties help in encapsulation and abstraction in object-oriented programming?']},
    {'Main question': 'Describe a scenario where using properties or descriptors would be beneficial in a Python application.', 'Explanation': 'The candidate should provide a practical example or use case where the use of properties or descriptors adds value to a Python application. This could involve enforcing data validation rules, calculating derived attributes dynamically, or implementing lazy loading of data.', 'Follow-up questions': ['How can properties be utilized to implement lazy evaluation of attribute values in a class?', 'In what situations would using descriptors for attribute access control offer more flexibility than properties?', 'Can you elaborate on the performance implications of using properties versus direct attribute access in Python applications?']},
    {'Main question': 'Explain the concept of getter and setter methods in the context of properties and how they contribute to attribute management.', 'Explanation': 'The interviewee should discuss the role of getter methods in retrieving attribute values and setter methods in updating attribute values within a class using properties. Getter methods enable controlled access to attribute values, while setter methods facilitate data validation, transformation, and enforcement of constraints on attribute assignments.', 'Follow-up questions': ['What are the common best practices for implementing getter and setter methods in Python classes?', 'How can getter and setter methods enhance code readability and maintainability in object-oriented programming?', 'Can you discuss any potential pitfalls or anti-patterns to avoid when using getter and setter methods with properties in Python?']}
]