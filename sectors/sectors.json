[
    {
        "domain": "Basic Python",
        "titles": "Introduction to Python",
        "detail": "Python is a high-level, interpreted programming language known for its simplicity and readability. It is widely used in web development, data analysis, artificial intelligence, and scientific computing.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Python Syntax and Semantics",
        "detail": "Python syntax refers to the rules that define the structure of the language, while semantics define the meaning of the language constructs. Understanding both is essential for writing correct and efficient code.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Variables and Data Types",
        "detail": "Variables are used to store data in memory, while data types define the type of data that can be stored in a variable. Python supports various data types such as integers, floats, strings, lists, tuples, sets, and dictionaries.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Control Flow Statements",
        "detail": "Control flow statements allow you to control the execution of code based on conditions. 'if' and 'else' statements are used for conditional execution, while 'for' and 'while' loops are used for iteration.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Functions and Lambdas",
        "detail": "Functions are blocks of reusable code that perform a specific task. Lambdas are anonymous functions that can be defined in a single line. Both are essential for organizing and modularizing code.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Exception Handling",
        "detail": "Exception handling allows you to gracefully handle errors and exceptions that occur during program execution. It helps prevent crashes and provides a way to recover from unexpected situations.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "File IO Operations",
        "detail": "File IO operations allow you to read from and write to files on disk. Python provides built-in functions and methods for working with files, making it easy to manipulate file data.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "List Comprehensions",
        "detail": "List comprehensions provide a concise way to create lists in Python. They allow you to generate lists using a single line of code, making code more readable and efficient.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Generators and Iterators",
        "detail": "Generators and iterators are used to create iterable objects in Python. They allow you to iterate over sequences of data without loading the entire sequence into memory, making them memory-efficient.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Decorators in Python",
        "detail": "Decorators are a powerful feature in Python that allow you to modify or extend the behavior of functions or methods.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Context Managers",
        "detail": "Context managers are used to manage resources in Python, such as files or database connections. They ensure that resources are properly cleaned up after use, even if an error occurs.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Modules and Packages",
        "detail": "Modules are files that contain Python code, while packages are directories that contain multiple modules. They help organize and reuse code, making it easier to manage large projects.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Virtual Environments",
        "detail": "Virtual environments are isolated Python environments that allow you to install and manage dependencies for different projects. They help avoid conflicts between project dependencies and ensure reproducibility.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Python Standard Library",
        "detail": "The Python Standard Library is a collection of modules and packages that provide a wide range of functionality, such as file I/O, networking, and data processing. It is included with Python and does not require additional installation.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Regular Expressions",
        "detail": "Regular expressions are used to search and manipulate text patterns in Python. They provide a powerful and flexible way to match and extract data from strings.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Using map_filter_reduce",
        "detail": "The map(), filter(), and reduce() functions are built-in functions in Python that allow you to apply a function to each element of an iterable, filter elements based on a condition, and reduce a sequence of elements to a single value, respectively.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "String Manipulation Functions",
        "detail": "String manipulation functions in Python allow you to manipulate and format strings, such as concatenating, splitting, and replacing substrings. They are essential for working with text data.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Numeric and Math Functions",
        "detail": "Numeric and math functions in Python provide a wide range of mathematical operations, such as arithmetic, trigonometric, and statistical functions. They are essential for scientific computing and data analysis.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Data Structure Functions",
        "detail": "Data structure functions in Python provide methods to manipulate lists, tuples, sets, and dictionaries. They allow you to add, remove, and modify elements in data structures efficiently.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Date and Time Functions",
        "detail": "Date and time functions in Python provide methods to work with dates, times, and time zones. They allow you to parse, format, and manipulate date and time values.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Input and Output Functions",
        "detail": "Input and output functions in Python allow you to interact with the user through the console, read input from files, and write output to files. They are essential for building interactive applications.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Built-in Sorting and Searching",
        "detail": "Python provides built-in functions and methods for sorting and searching elements in lists, tuples, sets, and dictionaries. They allow you to efficiently organize and search data.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Type Conversion Functions",
        "detail": "Type conversion functions in Python allow you to convert data between different data types, such as integers, floats, strings, and lists. They are essential for data processing and manipulation.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Object-Oriented Functions",
        "detail": "Object-oriented programming is a programming paradigm that uses objects and classes to model real-world entities. Python supports object-oriented programming, making it easy to create and work with objects.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Classes and Objects",
        "detail": "Classes are blueprints for creating objects, while objects are instances of classes. They allow you to model real-world entities and define their behavior and attributes.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Inheritance and Polymorphism",
        "detail": "Inheritance allows you to create new classes based on existing classes, while polymorphism allows objects of different classes to be treated as objects of a common superclass. They help promote code reuse and flexibility.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Encapsulation and Abstraction",
        "detail": "Encapsulation is the process of hiding the internal implementation details of a class, while abstraction is the process of hiding unnecessary details and exposing only the essential features. They help improve code maintainability and readability.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Magic Methods and Operator Overloading",
        "detail": "Magic methods are special methods in Python that allow you to define custom behavior for built-in operations, such as addition, subtraction, and comparison. They provide a way to customize the behavior of objects.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Composition and Aggregation",
        "detail": "Composition is a design pattern in which a class contains objects of other classes, while aggregation is a design pattern in which a class has a reference to another class. They help promote code reuse and modularity.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Class and Static Methods",
        "detail": "Class and static methods are methods that belong to a class rather than an instance of a class. They allow you to define behavior that is shared across all instances of a class or does not depend on instance state.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Properties and Descriptors",
        "detail": "Properties and descriptors are used to define custom behavior for accessing and setting attributes of a class. They allow you to enforce constraints and validation rules on attribute values.",  
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Abstract Base Classes",
        "detail": "Abstract base classes are classes that define a set of methods that must be implemented by subclasses. They provide a way to define interfaces and enforce method implementations in derived classes.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Metaclasses in Python",
        "detail": "Metaclasses are classes that define the behavior of classes. They allow you to customize class creation and modify class attributes and methods. Metaclasses are a powerful feature in Python for advanced use cases.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Unit Testing in Python",
        "detail": "Unit testing is a software testing technique in which individual units or components of a software application are tested in isolation. Python provides built-in libraries and frameworks for writing and running unit tests.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Debugging Techniques",
        "detail": "Debugging is the process of identifying and fixing errors in a program. Python provides built-in tools and techniques for debugging, such as print statements, logging, and debugging tools.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Profiling and Optimization",
        "detail": "Profiling is the process of measuring the performance of a program to identify bottlenecks and optimize code. Python provides built-in tools and libraries for profiling and optimizing code.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Concurrency and Parallelism",
        "detail": "Concurrency is the ability of a program to execute multiple tasks simultaneously, while parallelism is the ability of a program to execute multiple tasks in parallel. Python provides built-in libraries and frameworks for writing concurrent and parallel code.",
        "subject": "Python"
    },
    {
        "domain": "Basic Python",
        "titles": "Asynchronous Programming",
        "detail": "Asynchronous programming is a programming paradigm that allows tasks to run concurrently without blocking the main program. Python provides built-in libraries and frameworks for writing asynchronous code.",
        "subject": "Python"
    }
]
